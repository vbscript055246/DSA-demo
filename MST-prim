import random
import math
random.seed()

edge_table = [
   #  A  B  C  D  E  F  G  H  I
    [ 0, 4, 0, 0, 0, 0, 0, 8, 0], # A
    [ 4, 0, 8, 0, 0, 0, 0,11, 0], # B
    [ 0, 8, 0, 7, 0, 4, 0, 0, 2], # C
    [ 0, 0, 7, 0, 9,14, 0, 0, 0], # D
    [ 0, 0, 0, 9, 0,10, 0, 0, 0], # E
    [ 0, 0, 4,14,10, 0, 2, 0, 0], # F
    [ 0, 0, 0, 0, 0, 2, 0, 1, 6], # G
    [ 8,11, 0, 0, 0, 0, 1, 0, 7], # H
    [ 0, 0, 2, 0, 0, 0, 6, 7, 0]  # I
]

# prepare record
class vertex:
    def __init__(self, v=-1, w=math.inf):
        self.pi = v
        self.key = w
    def __str__(self):
        return "頂點:{}, 透過權重 {} 的邊連接".format(chr(self.pi+97), self.key)

# 1. 準備兩個集合 一個是含有所有頂點 一個是放已經建立連結的節點
Q = list(range(9))
MST = []
marker = [0]*9  # 方便紀錄哪個節點已經建立過了

# 2. 隨便選一個起點
index = random.randint(0, 8)

# 把起點放到已經連結的集合中，並從原本集合中去除
MST.append(vertex(Q[index]))
Q.remove(Q[index])
marker[index] = 1 # 在marker上記錄


# 5. 當有所有頂點的集合中不再含有任何節點則結束
while len(Q):
	# 3. 找到已連結與未連結集合之間最小權重的邊
    min = math.inf
    add_vtx = -1
    for vt_obj in MST:
        for index ,Q_vt_weight in enumerate(edge_table[vt_obj.pi]):
            if min > Q_vt_weight and Q_vt_weight and marker[index]==0:
                min = Q_vt_weight
                add_vtx = index
    # 如果找不到邊，未連結集合又還未清除，無法生成MST
    if min == math.inf:
        print("no spanning tree")
        exit(87)

    # 4. 做跟步驟2一樣的事
    MST.append(vertex(add_vtx, min))
    Q.remove(add_vtx)
    marker[add_vtx] = 1

# result
[print(item) for item in MST]
